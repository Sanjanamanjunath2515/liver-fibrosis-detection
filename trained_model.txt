import os

data_dir = '/kaggle/input/preprocessed-data'
print(f"Top-level contents: {os.listdir(data_dir)}")

for root, dirs, files in os.walk(data_dir):
    print(f"\nFolder: {root}")
    print(f"Subfolders: {dirs}")
    print(f"Files: {files[:5]}") 
import os

data_dir = '/kaggle/input/preprocessed-data'
all_files = []

for root, dirs, files in os.walk(data_dir):
    for file in files:
        if file.lower().endswith(('.png', '.jpg', '.jpeg')):
            all_files.append(os.path.join(root, file))

print(f"Found {len(all_files)} images, sample 10:")
print(all_files[:10])
import os
import re
import pandas as pd

data_dir = '/kaggle/input/preprocessed-data'

# Check if subfolders are numeric labels or stage labels
subfolders = [f for f in os.listdir(data_dir) if os.path.isdir(os.path.join(data_dir, f))]
print("Subfolders found:", subfolders)

# If subfolders exist and are class names (digits or "stageX"), use folder names as labels
if len(subfolders) > 0:
    print("Assuming folder structure with labels as folder names.")
    rows = []
    for label in subfolders:
        folder_path = os.path.join(data_dir, label)
        for f in os.listdir(folder_path):
            if f.lower().endswith(('.png', '.jpg', '.jpeg')):
                rows.append({'filename': os.path.join(label, f), 'label': label})
    df = pd.DataFrame(rows)

else:
    # No subfolders: try extract label from filename with regex
    print("No label folders found; trying to extract labels from filenames using regex.")

    pattern = re.compile(r'(?:stage|stg|fibrosis)?[_\-]?(\d)', re.IGNORECASE)
    rows = []
    for f in os.listdir(data_dir):
        if f.lower().endswith(('.png', '.jpg', '.jpeg')):
            match = pattern.search(f)
            if match:
                label = match.group(1)
                rows.append({'filename': f, 'label': label})
            else:
                print(f"Skipping file (no label found): {f}")
    df = pd.DataFrame(rows)

print("Sample of DataFrame:")
print(df.head())

if df.empty or 'label' not in df.columns:
    raise ValueError("No data found or no 'label' column detected. Please verify your dataset.")

# Convert labels to integers if possible
try:
    df['label'] = df['label'].astype(int)
except:
    print("Warning: labels could not be converted to int, using as string classes.")

print(f"Number of classes detected: {df['label'].nunique()}")
import os
import numpy as np
import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, models, transforms
from torch.utils.data import DataLoader, random_split
from sklearn.metrics import roc_auc_score, roc_curve, confusion_matrix
import matplotlib.pyplot as plt

# Paths and parameters
data_dir = '/kaggle/input/preprocessed-data'
batch_size = 32
num_epochs = 25
early_stop_patience = 3
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# Data transforms (resize to 224x224, normalize as ImageNet)
data_transforms = {
    'train': transforms.Compose([
        transforms.RandomHorizontalFlip(),
        transforms.RandomRotation(10),
        transforms.Resize((224,224)),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406],
                             [0.229, 0.224, 0.225])
    ]),
    'val': transforms.Compose([
        transforms.Resize((224,224)),
        transforms.ToTensor(),
        transforms.Normalize([0.485, 0.456, 0.406],
                             [0.229, 0.224, 0.225])
    ]),
}

# Load full dataset using ImageFolder (labels from folder names)
full_dataset = datasets.ImageFolder(data_dir, transform=data_transforms['train'])

# Split dataset: 80% train, 20% val
train_size = int(0.8 * len(full_dataset))
val_size = len(full_dataset) - train_size
train_dataset, val_dataset = random_split(full_dataset, [train_size, val_size])

# Update val dataset transform to val transforms
val_dataset.dataset.transform = data_transforms['val']

train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, num_workers=4)
val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False, num_workers=4)

num_classes = len(full_dataset.classes)
print(f"Classes: {full_dataset.classes}, Number of classes: {num_classes}")

# Load pretrained ResNet50, modify final layer for num_classes
model = models.resnet50(pretrained=True)
num_ftrs = model.fc.in_features
model.fc = nn.Linear(num_ftrs, num_classes)
model = model.to(device)

criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=1e-4)

# Early stopping variables
best_val_loss = float('inf')
patience_counter = 0

# Training loop
for epoch in range(num_epochs):
    model.train()
    running_loss = 0
    running_corrects = 0
    
    for inputs, labels in train_loader:
        inputs, labels = inputs.to(device), labels.to(device)
        
        optimizer.zero_grad()
        outputs = model(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        
        running_loss += loss.item() * inputs.size(0)
        _, preds = torch.max(outputs, 1)
        running_corrects += torch.sum(preds == labels.data)
    
    epoch_loss = running_loss / train_size
    epoch_acc = running_corrects.double() / train_size
    
    # Validation
    model.eval()
    val_loss = 0
    val_corrects = 0
    all_labels = []
    all_probs = []
    
    with torch.no_grad():
        for inputs, labels in val_loader:
            inputs, labels = inputs.to(device), labels.to(device)
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            val_loss += loss.item() * inputs.size(0)
            _, preds = torch.max(outputs, 1)
            val_corrects += torch.sum(preds == labels.data)
            
            probs = torch.softmax(outputs, dim=1)
            all_probs.append(probs.cpu().numpy())
            all_labels.append(labels.cpu().numpy())
    
    val_loss /= val_size
    val_acc = val_corrects.double() / val_size
    
    all_probs = np.concatenate(all_probs)
    all_labels = np.concatenate(all_labels)
    
    # Compute AUC for multi-class (one-vs-rest)
    try:
        auc = roc_auc_score(all_labels, all_probs, multi_class='ovr')
    except Exception as e:
        auc = None
    
    print(f"Epoch {epoch+1}/{num_epochs} | "
          f"Train Loss: {epoch_loss:.4f}, Train Acc: {epoch_acc:.4f} | "
          f"Val Loss: {val_loss:.4f}, Val Acc: {val_acc:.4f} | "
          f"AUC: {auc if auc is not None else 'N/A'}")
    
    # Early stopping check
    if val_loss < best_val_loss:
        best_val_loss = val_loss
        patience_counter = 0
        # Save best model
        torch.save(model.state_dict(), 'best_model.pth')
    else:
        patience_counter += 1
        if patience_counter >= early_stop_patience:
            print(f"Early stopping triggered after {epoch+1} epochs.")
            break

# Load best model for evaluation
model.load_state_dict(torch.load('best_model.pth'))
model.eval()

# Final evaluation on validation set with confusion matrix and ROC curve
from sklearn.preprocessing import label_binarize

all_preds = []
all_true = []
all_probs = []

with torch.no_grad():
    for inputs, labels in val_loader:
        inputs, labels = inputs.to(device), labels.to(device)
        outputs = model(inputs)
        probs = torch.softmax(outputs, dim=1)
        _, preds = torch.max(outputs, 1)
        
        all_preds.extend(preds.cpu().numpy())
        all_true.extend(labels.cpu().numpy())
        all_probs.extend(probs.cpu().numpy())

all_true = np.array(all_true)
all_preds = np.array(all_preds)
all_probs = np.array(all_probs)

# Confusion matrix
cm = confusion_matrix(all_true, all_preds)
print("Confusion Matrix:")
print(cm)

# ROC and AUC plot for each class
all_true_bin = label_binarize(all_true, classes=range(num_classes))

plt.figure(figsize=(10,8))
for i in range(num_classes):
    fpr, tpr, _ = roc_curve(all_true_bin[:, i], all_probs[:, i])
    auc_score = roc_auc_score(all_true_bin[:, i], all_probs[:, i])
    plt.plot(fpr, tpr, label=f'Class {full_dataset.classes[i]} (AUC = {auc_score:.2f})')

plt.plot([0, 1], [0, 1], 'k--')
plt.title('ROC Curve per Class')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.legend(loc='best')
plt.show()
